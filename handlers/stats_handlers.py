from aiogram import types
from data.database import get_user_stats, get_leaderboard


async def show_stats(message: types.Message):
    stats = await get_user_stats(message.from_user.id)
    if stats:
        await message.answer(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats[0]}\n"
            f"–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats[2]}/{stats[1]} (–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö/–≤—Å–µ–≥–æ)"
        )
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /quiz")


async def show_leaderboard(message: types.Message):
    leaderboard = await get_leaderboard()
    if not leaderboard:
        await message.answer("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    leaderboard_text = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (username, last_score, correct, total) in enumerate(leaderboard, 1):
        leaderboard_text += (
            f"{i}. {username}: {last_score} (–≤—Å–µ–≥–æ {correct}/{total})\n"
        )

    await message.answer(leaderboard_text)
    